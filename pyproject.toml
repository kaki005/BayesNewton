[project]
description = "Bayes-Newton provides a unifying view of approximate Bayesian inference, and allows for the combination of many models (e.g. GPs, sparse GPs, Markov GPs, sparse Markov GPs) with the inference method of your choice (VI, EP, Laplace, Linearisation). For a full list of the methods implemented scroll down to the bottom of this page."
name = "bayesnewton"
version = "1.3.4"
authors = []
dependencies = [
    "jax>=0.4.38",
    "jaxlib>=0.4.38",
    "objax>=1.8.0",
    "numpy>=2.1",
    "tensorflow-probability>=0.25.0",
    "jaxtyping>=0.2.36",
]
readme = "README.md"
requires-python = ">= 3.6"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "pre-commit>=4.0.1",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["bayesnewton"]


[tool.ruff]
line-length = 130 # 1行の最大文字数

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise ... from ... になっていない場合のエラーを無視
    "F401",   # imported but not used
    "F841",   # assigned but not used
    "B023",   # Function definition does not bind loop variable `column`
    "UP008",
    "B007",
    "TD002",  # missing authotor in TODO
    "F722",   # for ignoring jaxtyping
    "F821",   # for ignoring jaxtyping
    "ERA001", # ignore comment-outed code
    "D102",   # public method docstring is none
    "N802",   # function name should be lower case
    "N806",   # variable name should be lower case
    "D101",   # missing doc string
    "D107",   # missing doc string
    "D103",   # missing doc string
] # 除外するエラーの種類
fixable = ["ALL"]
unfixable = ["F401"] # imported but not used
logger-objects = ["logging.Logger"]


[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.per-file-ignores] # ファイルごとのエラー除外
"__init__.py" = ["F401"]


[tool.ruff.lint.isort] # isort の設定
known-third-party = []

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true # Python3.8互換のための設定

[tool.ruff.lint.mccabe]
max-complexity = 8

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
strict = false
disallow_untyped_calls = false
check_untyped_defs = false
allow_redefinition = true
show_error_context = true      # エラー時のメッセージを詳細表示
show_column_numbers = true     # エラー発生箇所の行数/列数を表示
ignore_missing_imports = true  # import 先のチェックを行わない (デフォルトだとサードパーティーライブラリまでチェックする)
disallow_untyped_defs = false  # 関数定義の引数/戻り値に型アノテーション必須
no_implicit_optional = true    # デフォルト引数に None を取る場合型アノテーションに Optional 必須
warn_return_any = true         # 戻り値が Any 型ではない関数の戻り値の型アノテーションが Any のとき警告
# ※ `# type: ignore` が付与されている箇所は mypy のエラーを無視出来る
# warn_unused_ignores = true   # mypy エラーに該当しない箇所に `# type: ignore` コメントが付与されていたら警告
warn_redundant_casts = true # 冗長なキャストに警告
exclude = ["^old/"]
